(function () { var t = { 4302: function (t, e, s) { "use strict"; var i = s(144), a = s(3726), o = s(1819), r = s(3102), n = function () { var t = this, e = t._self._c; return e(a.Z, ["home" !== t.$route.name ? e("router-view", { key: t.$route.fullPath }) : e("div", [e("Header"), e("Aside", { on: { createWindow: t.receivedCreateWindow } }), e(r.Z, [e(o.Z, { attrs: { fluid: "" } }, [t.$store.state.loaded ? e("TabWizard", { attrs: { tabRequest: t.tabRequest } }) : t._e()], 1), e("Footer")], 1)], 1)], 1) }, c = [], l = s(9088), u = s(7970), d = s(1667), h = s(3560), m = s(1419), p = s(7316), g = function () { var t = this, e = t._self._c; return e(p.Z, { attrs: { "expand-on-hover": "", "mini-variant": t.mini, permanent: "", app: "" } }, [e(u.Z, t._l(t.config.components, (function (s, i) { return e(d.Z, { key: s.componentName, attrs: { disabled: t.isDisabled(s.type) }, on: { click: function (e) { return t.openWindow(s) } } }, [e(h.Z, [e(l.Z, { attrs: { disabled: t.isDisabled(s.type) } }, [t._v(t._s(s.icon))])], 1), e(m.V9, [t._v(t._s(s.displayName))])], 1) })), 1)], 1) }, v = [], f = { name: "Aside", data() { return { mini: !1 } }, mounted() { }, methods: { openWindow(t) { (t.children && 0 === t.children.length || !t.children) && this.$emit("createWindow", t) }, isDisabled(t) { return !this.$store.state.enabled.includes(t) } } }, C = f, y = s(1001), b = (0, y.Z)(C, g, v, !1, null, null, null), _ = b.exports, x = s(3381), w = s(3816), S = s(5255), Z = s(9657), k = s(6975), E = s(7728), T = s(6182), N = s(4213), A = function () { var t = this, e = t._self._c; return e("div", [[e(E.Z, { staticClass: "app-tabs", attrs: { "show-arrows": "" } }, [t._l(t.items, (function (s) { return [e(Z.Z, { key: s.displayName, scopedSlots: t._u([{ key: "default", fn: function ({ hover: i }) { return [[e("div", { key: s.displayName, staticClass: "v-tab v-tab-custom", class: { active: s.displayName === t.currentItem }, style: { backgroundColor: s.color } }, [e(N.Z, { attrs: { top: "", "open-delay": "500" }, scopedSlots: t._u([{ key: "activator", fn: function ({ on: i, attrs: a }) { return [e("div", t._g(t._b({ staticClass: "v-tab-name", on: { click: function (e) { return t.activateItem(s) } } }, "div", a, !1), i), [e(l.Z, { staticClass: "tab-icon mr-2", attrs: { color: "#D3D3D3", small: "" } }, [t._v(" " + t._s(s.icon) + " ")]), t._v(" " + t._s(t.truncate(s.displayName, 10)) + " ")], 1)] } }], null, !0) }, [e("span", [t._v(t._s(s.displayName))])]), s.isDirty ? t._e() : e(x.Z, { staticClass: "close-btn", attrs: { icon: "", small: "" }, on: { click: function (e) { return t.closeTab(s) } } }, [s.displayName === t.currentItem || i ? e(l.Z, { attrs: { small: "" } }, [t._v("fas fa-xmark")]) : t._e()], 1), e(Z.Z, { key: s.displayName + "-hover-close-btn", scopedSlots: t._u([{ key: "default", fn: function ({ hover: i }) { return [[e("div", { staticStyle: { width: "28px" } }, [i ? e("div", [e(x.Z, { staticClass: "close-btn", attrs: { icon: "" }, on: { click: function (e) { return t.closeTab(s) } } }, [e(l.Z, { attrs: { small: "" } }, [t._v("fas fa-xmark")])], 1)], 1) : t._e()])]] } }], null, !0) })], 1)]] } }], null, !0) })] }))], 2)], e(T.Z, { staticClass: "app-tabs-items", model: { value: t.currentItem, callback: function (e) { t.currentItem = e }, expression: "currentItem" } }, t._l(t.items, (function (s, i) { return e(k.Z, { key: s.id, staticClass: "no-transition", attrs: { value: s.displayName } }, [e(w.Z, { staticClass: "app-card", attrs: { flat: "" } }, [e(S.ZB, { staticClass: "pa-3 card-text" }, [e("keep-alive", { key: s.componentName }, [e(s.componentName, t._g({ tag: "component", attrs: { id: t.tabName } }, t.$listeners))], 1)], 1)], 1)], 1) })), 1)], 2) }, I = [], D = { name: "TabWizard", props: ["tabRequest"], data: () => ({ currentItem: null, currentItemType: "", currentItemData: {}, items: [], tabName: "" }), watch: { tabRequest(t, e) { this.openTab(t) } }, mounted() { this.$root.$on("openTab", (t => { this.openTab(t) })), this.tabName = "Summary Report", this.items.push({ id: this.makeId(5), displayName: "Summary Report", type: "summaryReport", componentName: "SummaryReport", icon: "fa-clipboard-list", color: "", isDirty: !1 }), this.$nextTick((() => { this.currentItem = "Summary Report", this.currentItemType = "summaryReport" })) }, methods: { openTab(t) { if (0 === Object.keys(t).length) return; const e = this.items.some((e => e.displayName === t.displayName)); e || (this.tabName = t.displayName, this.items.push({ id: this.makeId(5), displayName: this.tabName, componentName: t.componentName, type: t.type, icon: t.icon, color: t.color, isDirty: !1 })), this.$nextTick((() => { this.tabName = t.displayName, this.currentItem = this.tabName, this.currentItemType = t.componentName, t.data && (this.currentItemData = t.data) })) }, activateItem(t) { this.$nextTick((() => { this.currentItem = t.displayName, this.currentItemType = t.componentName })) }, closeTab(t) { const e = this.items.indexOf(t); if (this.items.splice(e, 1), 1 === this.items.length) this.activateItem(this.items[0]); else if (this.items.length > 1) { const t = this.items.findIndex((t => t.displayName == this.currentItem)); -1 !== t ? this.activateItem(this.items[t]) : this.activateItem(this.items[0]) } else this.currentItem = "", this.currentItemType = ""; 0 === this.items.length && this.$emit("tabWizardEmpty") } } }, L = D, W = (0, y.Z)(L, A, I, !1, null, null, null), O = W.exports, F = s(7024), P = s(8984), R = s(7894), M = function () { var t = this, e = t._self._c; return e(P.Z, { attrs: { padless: "" } }, [e(R.Z, { staticClass: "py-3", attrs: { "no-gutters": "" } }, [e(F.Z, { staticClass: "px-4 d-flex align-center justify-start", attrs: { cols: "5" } }, [e("div", [t._v(t._s(t.text))])]), e(F.Z, { staticClass: "px-4 d-flex align-center justify-end", attrs: { cols: "7" } }, [t._v(" Powered by "), e("img", { staticClass: "logo ml-3", staticStyle: { height: "40px" }, attrs: { src: s(646), alt: "logo" } })])], 1)], 1) }, $ = [], B = { data: () => ({ text: "" }), mounted() { setTimeout((() => { window.header && (this.text = window.header[0].footerText) }), 200) } }, V = B, U = (0, y.Z)(V, M, $, !1, null, null, null), j = U.exports, z = s(5078), J = s(2732), q = s(3845), H = function () { var t = this, e = t._self._c; return e(w.Z, { attrs: { color: "grey lighten-4", flat: "", tile: "" } }, [e(J.Z, [e(z.Z), e(q.qW, [e(R.Z, [e(F.Z, { attrs: { cols: "auto" } }, ["" !== t.image ? e("img", { staticClass: "logo ml-3 py-4", attrs: { src: t.image, alt: "logo" } }) : t._e()]), t.heading ? e(F.Z, { staticClass: "d-flex align-center", attrs: { cols: "auto" } }, [e("div", [t._v(t._s(t.heading))])]) : t._e()], 1)], 1)], 1)], 1) }, X = [], Y = { data: () => ({ languages: ["en", "fr", "sp"], image: "", heading: "" }), mounted() { setTimeout((() => { location.pathname.includes("index.html") && this.checkIfImageExists("./execution/header-image.jpg", (t => { t && (this.image = "./execution/header-image.jpg") })), window.header && (this.heading = window.header[0].headerText, window.header[0].headerImage && (this.image = window.header[0].headerImage)) }), 200) }, methods: { checkIfImageExists(t, e) { const s = new Image; s.src = t, s.complete ? e(!0) : (s.onload = () => { e(!0) }, s.onerror = () => { e(!1) }) } } }, G = Y, K = (0, y.Z)(G, H, X, !1, null, null, null), Q = K.exports, tt = { name: "App", components: { Aside: _, TabWizard: O, Footer: j, Header: Q }, data: () => ({ tabRequest: {}, test: !1, enabled: [] }), mounted() { location.pathname.includes("index.html") ? this.loadScripts() : "/upload" !== this.$router.history.current.path && this.$router.push({ name: "upload" }) }, methods: { receivedCreateWindow(t) { this.tabRequest = { id: Math.random(), ...t } }, clearTabRequest() { this.tabRequest = {} }, loadScripts() { const t = this, e = ["features", "complexity", "i18N", "accessibility", "browserPerformance", "header"]; e.forEach((e => { let s = document.createElement("script"); s.type = "text/javascript", s.addEventListener("load", (function (e) { window.complexity && (t.enabled.includes("complexity") || (t.enabled.push("complexity"), t.$store.commit("setEnabled", t.enabled), t.config.components.push({ displayName: "Complexity", componentName: "Complexity", type: "complexity", icon: "fa-chart-bar", hoverText: "", children: [], disabled: !0 }))), window.accessibility && (t.enabled.includes("accessibility") || (t.enabled.push("accessibility"), t.$store.commit("setEnabled", t.enabled), t.config.components.push({ displayName: "WCAG", componentName: "Accessibility", type: "accessibility", icon: "fa-universal-access", hoverText: "", children: [], disabled: !0 }))), window.i18N && (t.enabled.includes("i18N") || (t.enabled.push("i18N"), t.$store.commit("setEnabled", t.enabled), t.config.components.push({ displayName: "Internationalization (I18N)", componentName: "Internationalization", type: "i18N", icon: "fa-globe", hoverText: "", children: [], disabled: !0 }))), window.browserPerformance && (t.enabled.includes("browserPerformance") || (t.enabled.push("browserPerformance"), t.$store.commit("setEnabled", t.enabled), t.config.components.push({ displayName: "Browser Performance Metrics", componentName: "BrowserMetrics", type: "browserPerformance", icon: "fa-chart-column", hoverText: "", children: [], disabled: !0 }))), window.header && (t.enabled.includes("header") || (t.enabled.push("header"), t.$store.commit("setEnabled", t.enabled))), "/" !== t.$router.history.current.path && t.$router.push({ name: "home" }) })), s.addEventListener("error", (function (e) { 0 === t.enabled.length && "/upload" !== t.$router.history.current.path && t.$router.push({ name: "upload" }) })), s.src = `./execution/${e}.js`, document.head.appendChild(s) })), t.enabled.push("summaryReport"), setTimeout((() => { this.enabled.length > 0 ? this.$store.commit("setLoaded", !0) : "/upload" !== this.$router.history.current.path && this.$router.push({ name: "upload" }) }), 300) } } }, et = tt, st = (0, y.Z)(et, n, c, !1, null, null, null), it = st.exports, at = s(7463), ot = s(3749), rt = s(7690), nt = s(4557), ct = s(4694), lt = s(6131), ut = s(5136), dt = s(8836), ht = s(3206), mt = function () { var t = this, e = t._self._c; return e("div", [e("div", { staticClass: "text-center my-1" }, [e(R.Z, [e(F.Z, { staticClass: "d-flex justify-center align-center", attrs: { cols: "6" } }, [e("h1", { staticClass: "darkgreen--text darken-1" }, [t._v("Accessibility Metrics")])]), e(F.Z, { staticClass: "d-flex justify-end align-end", attrs: { cols: "6" } }, [e(x.Z, { on: { click: function (e) { t.categoryDialog = !0 } } }, [t._v("Show Category Details")])], 1)], 1)], 1), e(rt.Z, { staticClass: "my-4" }), e(at.Z, { staticClass: "elevation-1 accessiblityTable", staticStyle: { "box-shadow": "0 5px 6px -3px rgba(0, 0, 0, 0.2), 0 9px 12px 1px rgba(0, 0, 0, 0.14), 0 3px 16px 2px rgba(0, 0, 0, 0.12) !important" }, attrs: { headers: t.headers, items: t.scriptItems, "disable-pagination": "", "hide-default-footer": "", "disable-sort": "" }, scopedSlots: t._u([{ key: "item.scenario", fn: function ({ item: s }) { return [e("span", [t._v(t._s(s.scenario))])] } }, { key: "item.task", fn: function ({ item: s }) { return [(isNaN(s.task), e("span", [t._v(t._s(s.task))]))] } }, { key: "item.step", fn: function ({ item: s }) { return [(isNaN(s.step), e("span", [t._v(t._s(s.step))]))] } }, { key: "item.action", fn: function ({ item: s }) { return [isNaN(s.action) ? e("div", [e(dt.Z, { attrs: { "open-on-hover": "", left: "", "offset-x": "" }, scopedSlots: t._u([{ key: "activator", fn: function ({ on: i, attrs: a }) { return [e("div", { staticStyle: { display: "inline-flex" } }, [e(x.Z, { attrs: { icon: "" }, on: { click: function (e) { return t.showErrors(s.image, s.errors) } } }, [e(l.Z, { attrs: { small: "" } }, [t._v("fas fa-info")])], 1), e("div", t._g(t._b({ staticClass: "pl-2", staticStyle: { "border-left": "1px solid white" } }, "div", a, !1), i), [t._v(" " + t._s(s.action) + " ")])], 1)] } }], null, !0) })], 1) : e("div", [t._v(" " + t._s(s.action) + " ")])] } }]) }), e(ot.Z, { attrs: { "content-class": "no-dialog-overflow", "max-width": "1000", "auto-grow": "", "hide-overlay": t.hideOverlay }, model: { value: t.categoryDialog, callback: function (e) { t.categoryDialog = e }, expression: "categoryDialog" } }, [e(w.Z, [e(S.ZB, [e(ht.Z, { scopedSlots: t._u([{ key: "default", fn: function () { return [e("thead", [e("tr", [e("th", { staticClass: "text-left" }, [t._v(" Category ")]), e("th", { staticClass: "text-left" }, [t._v(" Definition ")])])]), e("tbody", t._l(t.uniqueCategories, (function (s) { return e("tr", { key: s.text }, [e("td", [t._v(t._s(s.text))]), e("td", [t._v(t._s(s.value))])]) })), 0)] }, proxy: !0 }]) })], 1)], 1)], 1), e(ot.Z, { attrs: { "content-class": "no-dialog-overflow", "max-width": "1000", "auto-grow": "", "hide-overlay": t.hideOverlay }, model: { value: t.errorDialog, callback: function (e) { t.errorDialog = e }, expression: "errorDialog" } }, [e(w.Z, { staticClass: "elevation-2" }, [e(S.EB, { staticClass: "text-h5" }, [e(R.Z, [e(F.Z, { attrs: { cols: "11" } }, [t._v("Errors")]), e(F.Z, { staticClass: "text-end", attrs: { cols: "1" } }, [e(x.Z, { attrs: { icon: "" }, on: { click: function (e) { t.errorDialog = !1 } } }, [e(l.Z, [t._v("fas fa-close")])], 1)], 1)], 1)], 1), e(S.ZB, [e(ut.Z, { attrs: { focusable: "" } }, t._l(t.errors, (function (s, i) { return e(nt.Z, { key: i }, [e(lt.Z, [t._v(" " + t._s(s.category) + " ")]), e(ct.Z, [e("p", { staticClass: "my-2 grey--text" }, [t._v(t._s(s.description))]), e("p", [e("b", [t._v("Tags :")]), t._v(" " + t._s(t.displaySepratedByComma(s.tags)) + " ")]), e("p", [e("b", [t._v("Impact :")]), "critical" == s.impact || "serious" == s.impact ? e("span", { staticClass: "color_red" }, [t._v(" " + t._s(s.impact))]) : "moderate" == s.impact ? e("span", { staticClass: "color_yellow" }, [t._v(" " + t._s(s.impact))]) : e("span", { staticClass: "color_orange" }, [t._v(" " + t._s(s.impact))])]), t._l(s.errNodes, (function (s, i) { return e("div", { key: i }, [e(R.Z, ["" !== t.baseImage ? e(F.Z, { attrs: { cols: "auto" } }, [e("div", { staticClass: "element-screenshot", on: { click: function (e) { return t.expandImage(s.rectangle) } } }, [e(w.Z, { staticClass: "portrait", attrs: { ripple: !1, img: t.baseImage, height: "150px", width: "200px" } })], 1)]) : t._e(), e(F.Z, { attrs: { cols: "8" } }, [e("div", [t._v(" " + t._s(s.label) + " ")]), e("div", { staticClass: "teal--text" }, [t._v(" " + t._s(s.htmlSnippet) + " ")])])], 1)], 1) }))], 2)], 1) })), 1)], 1)], 1)], 1), e(ot.Z, { attrs: { "content-class": "no-dialog-overflow", fullscreen: "", "hide-overlay": t.hideOverlay }, model: { value: t.imageDialog, callback: function (e) { t.imageDialog = e }, expression: "imageDialog" } }, [e(w.Z, { staticClass: "elevation-2" }, [e(S.ZB, [e("div", { staticClass: "text-center", on: { click: function (e) { t.imageDialog = !1 } } }, [e("div", { staticClass: "element-screenshot__overlay" }, [e("div", { staticClass: "element-screenshot" }, [e("div", { staticClass: "element-screenshot__content" }, [e("div", { staticClass: "element-screenshot__image", style: { "background-image": `url(${t.baseImage})`, position: "relative", width: `${t.dimension.width}px`, height: `${t.dimension.height}px` } }, [e("div", { staticClass: "element-screenshot__element-marker", style: { position: "absolute", outline: "2px solid yellow", width: `${t.rectangle.width}px`, height: `${t.rectangle.height}px`, top: `${t.rectangle.top}px`, left: `${t.rectangle.left}px` } })])])])])])])], 1)], 1)], 1) }, pt = [], gt = { name: "Accessibility", data() { return { scripts: [], errors: [], baseImage: "", dimension: {}, categories: [], uniqueCategories: [], categoriesMap: {}, rectangle: {}, errorDialog: !1, imageDialog: !1, categoryDialog: !1, hideOverlay: !1, selectedElement: "", scriptItems: [], menu: !1, closeOnClick: !1, headers: [] } }, watch: { "$i18n.locale"(t) { } }, mounted() { if (window.accessibility) { const t = window.accessibility; this.scripts = t.map((t => ({ id: this.$uuid.v4(), scriptName: t.scriptName, onlyName: this.trimScriptName(t.scriptName), scenarios: t.scenarios.map((t => ({ id: this.$uuid.v4(), scenarioName: t.scenarioName, activities: t.activities.map((t => ({ id: this.$uuid.v4(), ...t, accessibilityData: t.accessibilityData.map((t => ({ id: this.$uuid.v4(), ...t }))) }))) }))) }))), this.headers = [{ text: "Scenarios", value: "scenario" }, { text: "Tasks", value: "task" }, { text: "Steps", value: "step" }, { text: "Actions", value: "action" }], this.createCategoriesArray(), this.createTableData(), this.addCategoryIssues() } else this.$router.push({ name: "upload" }) }, methods: { createTableData() { this.headers = [...this.headers, ...this.categories], this.headers.push({ text: "Total Issues", value: "totalIssues" }), this.scripts.forEach((t => { const e = { id: t.id, scenario: t.onlyName, task: t.scenarios.length, step: this.getSumOfTasks(t), action: this.getSumOfActionsForScript(t) }; this.scriptItems.push(e), t.scenarios.forEach((t => { const e = { id: t.id, scenario: "", task: t.scenarioName, step: t.activities.length, action: this.getSumOfActionsForScenario(t) }; this.scriptItems.push(e), t.activities.forEach((t => { const e = { id: t.id, scenario: "", task: "", step: t.activityName, action: t.accessibilityData.length }; this.scriptItems.push(e), t.accessibilityData.forEach((async t => { const e = { id: t.id, scenario: "", task: "", step: "", action: t.description, image: t.image ? t.image : "", errors: t.errors }, s = this.getCategoryData(t); let i = 0; Object.keys(s).forEach((function (t) { e[t] = s[t], i += s[t] })), e.totalIssues = i, this.scriptItems.push(e) })) })) })) })) }, createCategoriesArray() { let t = 1; this.scripts.forEach((e => { e.scenarios.forEach((e => { e.activities.forEach((e => { e.accessibilityData.forEach((e => { e.errors.forEach((e => { const s = this.uniqueCategories.findIndex((t => t.value === e.category)); -1 === s && (this.uniqueCategories.push({ text: `c${t}`, value: e.category }), this.categories.push({ text: `C${t}`, value: `c${t}` }), t++) })) })) })) })) })) }, getCategoryData(t) { let e = {}; return this.uniqueCategories.forEach(((s, i) => { const a = t.errors.findIndex((t => t.category === s.value)); e[[this.uniqueCategories[i].text]] = -1 !== a ? t.errors[a].errNodes.length : 0 })), e }, addCategoryIssues() { this.scripts.forEach((t => { const e = this.getSumOfCategoriesForScript(t); let s = 0; const i = this.scriptItems.findIndex((e => e.id === t.id)); if (-1 !== i) { const t = this; Object.keys(e).forEach((function (a) { t.scriptItems[i][a] = e[a], s += e[a] })), this.scriptItems[i].totalIssues = s } t.scenarios.forEach((t => { const e = this.getSumOfCategoriesForScenario(t); let s = 0; const i = this.scriptItems.findIndex((e => e.id === t.id)); if (-1 !== i) { const t = this; Object.keys(e).forEach((function (a) { t.scriptItems[i][a] = e[a], s += e[a] })), this.scriptItems[i].totalIssues = s } t.activities.forEach((t => { const e = this.getSumOfActionsForCategories(t); let s = 0; const i = this.scriptItems.findIndex((e => e.id === t.id)); if (-1 !== i) { const t = this; Object.keys(e).forEach((function (a) { t.scriptItems[i][a] = e[a], s += e[a] })), this.scriptItems[i].totalIssues = s } })) })) })) }, getSumOfCategoriesForScript(t) { let e = []; return t.scenarios.forEach((t => { e.push(this.getSumOfCategoriesForScenario(t)) })), this.sumObjectsByKey(...e) }, getSumOfCategoriesForScenario(t) { let e = []; return t.activities.forEach((t => { e.push(this.getSumOfActionsForCategories(t)) })), this.sumObjectsByKey(...e) }, getSumOfActionsForCategories(t) { let e = {}; const s = this.scriptItems.findIndex((e => e.id === t.id)); return this.uniqueCategories.forEach((i => { let a = 0; for (let e = s + 1; e < t.accessibilityData.length + s + 1; e++) { const t = this.scriptItems[e]; a += t[i.text] } e[i.text] = a })), e }, sumObjectsByKey(...t) { return t.reduce(((t, e) => { for (let s in e) e.hasOwnProperty(s) && (t[s] = (t[s] || 0) + e[s]); return t }), {}) }, getSumOfTasks(t) { let e = 0; return t.scenarios.forEach((t => { e += t.activities.length })), e }, getSumOfActionsForScript(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { e += t.accessibilityData.length })) })), e }, getSumOfActionsForScenario(t) { let e = 0; return t.activities.forEach((t => { e += t.accessibilityData.length })), e }, getScriptErrorCount(t) { let e = []; return t.scenarios.forEach((t => { e.push(this.getScenarioErrorCount(t)) })), this.sumArrays(e) }, getScenarioErrorCount(t) { let e = []; return t.activities.forEach((t => { e.push(this.getActivityErrorCount(t)) })), this.sumArrays(e) }, getActivityErrorCount(t) { let e = []; return t.accessibilityData.forEach((t => { e.push(this.getStepErrorCount(t)) })), this.sumArrays(e) }, getStepErrorCount(t) { return t.errors.map((t => t.errNodes.length)) }, sumArrays(t) { return t.reduce(((t, e) => t.map(((t, s) => t + e[s]))), new Array(t[0].length).fill(0)) }, async showErrors(t, e) { this.errorDialog = !0, this.errors = e, this.baseImage = t, this.dimension = await this.getDimensions(t) }, formatCategory(t) { let e = ""; return e = t.split(" ").map((t => t.match(/`(.*?)`/) ? `<span class="test">${t.replace(/[``]+/g, "")}</span>` : t)), e.join(" ") }, getDimensions(t) { return new Promise(((e, s) => { var i = new Image; i.src = t, i.onload = () => { e({ width: i.width, height: i.height }) } })) }, expandImage(t) { this.imageDialog = !0, this.rectangle = t }, trimScriptName(t) { return t ? t.split(".")[0] : "" }, displaySepratedByComma(t) { return t && 1 != t.length ? t.join(", ") : t } } }, vt = gt, ft = (0, y.Z)(vt, mt, pt, !1, null, null, null), Ct = ft.exports, yt = function () { var t = this, e = t._self._c; return e("div", { staticClass: "actionCountChart" }, [e("canvas", { attrs: { id: "actionCountChart" }, on: { click: function (e) { return t.drillDown(e) } } }), e(R.Z, { staticClass: "my-3" }, [e(F.Z, { staticClass: "text-end", attrs: { cols: "12" } }, [e(x.Z, { staticClass: "mx-3", attrs: { disabled: "EXECUTION" === t.executionLevel }, on: { click: function (e) { return t.resetChart() } } }, [t._v("Reset")]), e(x.Z, { staticClass: "mx-3", attrs: { disabled: "EXECUTION" === t.executionLevel }, on: { click: function (e) { return t.rollUp() } } }, [t._v("Back")])], 1)], 1)], 1) }, bt = [], _t = { name: "ActionCountChart", data() { return { dataSetJSON: { goodActionCount: { label: "Good", borderColor: "#008000", backgroundColor: "#008000", borderWidth: 1, tension: .3, fill: !0 }, betterActionCount: { label: "Average", borderColor: "#00FFFF", backgroundColor: "#00FFFF", borderWidth: 1, tension: .3, fill: !0 }, badActionCount: { label: "Need Improvements", borderColor: "#FF0000", backgroundColor: "#FF0000", borderWidth: 1, tension: .3, fill: !1 } }, isActivity: !1, trace: [], current: {}, executionLevel: "", heading: "", chartDetails: {}, summary: {} } }, mounted() { this.summary = execution_detail, this.current = execution_detail, this.executionLevel = "EXECUTION", this.heading = this.current.name, this.chartDetails = this.getChartDetails() }, methods: { updateChart() { let t = [], e = [], s = {}, i = [], a = [], o = [], r = []; for (let c in this.current.nestedExecutions) { let e = this.current.nestedExecutions[c]; t.push(e.name), "ACTIVITY" === this.executionLevel ? (i.push(e.actionCount), this.isActivity = !0, r.push(this.setActivityColor(e.actionCount))) : (this.isActivity = !1, i.push(e.goodActionCount), a.push(e.avgActionCount), o.push(e.badActionCount)) } this.isActivity ? e.push({ ...this.dataSetJSON.goodActionCount, data: i, backgroundColor: r }) : e.push({ ...this.dataSetJSON.goodActionCount, data: i }), e.push({ ...this.dataSetJSON.betterActionCount, data: a }), e.push({ ...this.dataSetJSON.badActionCount, data: o }), s.labels = t, s.datasets = e; let n = { data: { labels: s.labels, datasets: s.datasets }, options: this.getOptions(this.current) }; this.chartDetails.data = n.data, this.chartDetails.options = n.options, this.chartDetails.update() }, drillDown(t) { let e = this.chartDetails.getElementsAtEventForMode(t, "nearest", { intersect: !0 }, !0); if (e.length) { if ("SCENARIO" === this.current.executionLevel) return; if ("EXECUTION" !== this.executionLevel) { let t = e[0].index; this.current = this.current.nestedExecutions[t], this.executionLevel = this.current.nestedExecutions[0].executionLevel, this.trace.push(t) } else this.executionLevel = "SCRIPT"; this.heading = this.getHeading(this.trace), this.updateChart() } }, setActivityColor(t) { return t > 10 ? "#FF0000" : t > 5 && t <= 10 ? "#00FFFF" : "#008000" }, getChartDetails() { const t = document.getElementById("actionCountChart"); return new Chart(t, { type: "bar", data: this.getChartData(this.current, [""]), options: this.getOptions(this.current) }) }, getChartData(t, e) { return { labels: e, datasets: [{ ...this.dataSetJSON.goodActionCount, data: [t.goodActionCount] }, { ...this.dataSetJSON.betterActionCount, data: [t.avgActionCount] }, { ...this.dataSetJSON.badActionCount, data: [t.badActionCount] }] } }, getHeading(t) { if (t.length > 0) { let e = [this.summary.name], s = this.summary; for (let i = 0; i < t.length; i++)s = s.nestedExecutions[t[i]], e.push(s.name); return e.join(" - ") } return this.executionLevel = "SCRIPT", this.current.name }, getOptions() { return { scales: { x: { grid: { color: "#4c4c4c" } }, y: { position: "left", ticks: { stepSize: .5, beginAtZero: !0, font: { size: 12 }, color: "white" }, title: { display: !0, text: "No of Activities", font: { size: 16, weight: "bold", color: "rgba(50,50,50,0.75)" } }, grid: { color: "#4c4c4c" } } }, responsive: !0, interaction: { intersect: !1 }, plugins: { tooltip: { mode: "index", position: "nearest" }, title: { display: !0, text: this.heading, font: { size: 18, weight: "bold", color: "rgba(50,50,50,0.95)" } }, subtitle: { display: !0, text: this.executionLevel, position: "bottom", align: "center", font: { size: 20, weight: "bold", color: "rgba(50,50,50,0.95)" } }, legend: { display: !0, position: "top", labels: { boxWidth: 10, padding: 25, usePointStyle: !0 } } } } }, resetChart() { this.executionLevel = "EXECUTION", this.heading = this.current.name, this.current = execution_detail, this.chartDetails.data = this.getChartData(this.current, [""]), this.chartDetails.options = this.getOptions(this.current), this.chartDetails.update(), this.trace = [] }, rollUp() { if (this.trace.length < 0) alert("Invalid operation."); else { if (this.trace.length < 1) return this.executionLevel = "EXECUTION", void this.resetChart(); this.current = execution_detail; for (let t = 0; t < this.trace.length - 1; t++)this.current = this.current.nestedExecutions[this.trace[t]], this.executionLevel = this.current.nestedExecutions[0].executionLevel; this.trace.pop(), this.heading = this.getHeading(this.trace), this.updateChart() } } } }, xt = _t, wt = (0, y.Z)(xt, yt, bt, !1, null, null, null), St = wt.exports, Zt = function () { var t = this, e = t._self._c; return e("div", [e("div", { staticClass: "text-center my-1" }, [e(R.Z, [e(F.Z, { attrs: { cols: "12" } }, [e("h1", { staticClass: "darkgreen--text darken-1" }, [t._v("Browser Performance Metrics")])])], 1)], 1), e(rt.Z, { staticClass: "my-4" }), e(ut.Z, { attrs: { multiple: "", focusable: "", readonly: "" }, model: { value: t.panel, callback: function (e) { t.panel = e }, expression: "panel" } }, t._l(t.scenarios, (function (s, i) { return e(nt.Z, { key: i }, [e(lt.Z, { staticClass: "expansionPanelHeader", attrs: { "hide-actions": "" } }, [t._v(" " + t._s(t.scriptOnlyName) + " / " + t._s(s.name) + " ")]), e(ct.Z, { staticClass: "expansionPanel" }, [e(at.Z, { staticClass: "elevation-1 browserMetricstable", attrs: { headers: t.headers, items: s.activities, "disable-pagination": "", "hide-default-footer": "", "disable-sort": "" } })], 1)], 1) })), 1)], 1) }, kt = [], Et = { name: "BrowserMetrics", data() { return { scripts: [], scriptName: "", scriptOnlyName: "", errors: [], hideOverlay: !1, scriptItems: [], headers: [], scenarios: [], panel: [] } }, mounted() { if (window.browserPerformance) { const t = window.browserPerformance; this.scripts = t, this.scriptName = this.scripts[0].scriptName, this.scriptOnlyName = this.scripts[0].scriptName.split(".")[0], this.scenarios = t[0].scenarios, this.createTableData() } else this.$router.push({ name: "upload" }) }, methods: { createTableData() { this.scenarios.forEach(((t, e) => { this.panel.push(e) })); let t = []; this.scenarios.forEach((e => { let s = []; e.activities.forEach((t => { t.browserPerformanceList.forEach(((e, i) => { let a = {}; const { row: o, command: r, description: n, parameters: c, TTFB: l, TTLB: u, domInteractive: d, contentDownload: h, firstInteractive: m, firstResponseTime: p, latency: g, networkOverhead: v, pageCompleteTime: f, pageReady: C } = e; 0 === i ? (a = { activity: t.name, row: o, command: r, parameters: c, description: n, ttfb: l, ttlb: u, domInteractive: d, pageCompleteTime: f, latency: g, networkOverhead: v, firstResponseTime: p, contentDownload: h, firstInteractive: m, pageReady: C }, s.push(a)) : (a = { activity: "", row: o, command: r, parameters: c, description: n, ttfb: l, ttlb: u, domInteractive: d, pageCompleteTime: f, latency: g, networkOverhead: v, firstResponseTime: p, contentDownload: h, firstInteractive: m, pageReady: C }, s.push(a)) })) })), t.push({ name: e.scenarioName, activities: s }) })), this.scenarios = t, setTimeout((() => { this.computedHeaders() }), 100) }, computedHeaders() { this.headers = [{ text: "Activity", value: "activity" }, { text: "Description", value: "description" }, { text: "TTFB", value: "ttfb" }, { text: "TTLB", value: "ttlb" }, { text: "Dom Interactive", value: "domInteractive" }, { text: "Page Complete Time", value: "pageCompleteTime" }, { text: "Network Latency", value: "latency" }, { text: "Network Overhead", value: "networkOverhead" }, { text: "First Response", value: "firstResponseTime" }, { text: "Content Download", value: "contentDownload" }, { text: "First Interactive", value: "firstInteractive" }, { text: "Page Ready", value: "pageReady" }]; const t = this.scenarios[0].activities[0]; Object.keys(t).forEach((e => void 0 === t[e] ? delete t[e] : {})); const e = Object.keys(t), s = this.headers.filter((t => e.includes(t.value))); this.headers = s } } }, Tt = Et, Nt = (0, y.Z)(Tt, Zt, kt, !1, null, null, null), At = Nt.exports, It = s(2393), Dt = function () { var t = this, e = t._self._c; return e("div", [e("div", { staticClass: "my-8" }, [t._m(0), e(rt.Z, { staticClass: "my-4" }), e(at.Z, { staticClass: "elevation-1 accessiblityTable", staticStyle: { "box-shadow": "0 5px 6px -3px rgba(0, 0, 0, 0.2), 0 9px 12px 1px rgba(0, 0, 0, 0.14), 0 3px 16px 2px rgba(0, 0, 0, 0.12) !important" }, attrs: { headers: t.headers, items: t.scriptItems, "disable-pagination": "", "hide-default-footer": "", "disable-sort": "" }, scopedSlots: t._u([{ key: "item.scenario", fn: function ({ item: s }) { return [e("span", [t._v(t._s(s.scenario))])] } }, { key: "item.task", fn: function ({ item: s }) { return [(isNaN(s.task), e("span", [t._v(t._s(s.task))]))] } }, { key: "item.step", fn: function ({ item: s }) { return [(isNaN(s.step), e("span", [t._v(t._s(s.step))]))] } }, { key: "item.action", fn: function ({ item: s }) { return [(isNaN(s.action), e("div", [t._v(" " + t._s(s.action) + " ")]))] } }, { key: "item.validity", fn: function ({ item: s }) { return [e("span", { style: { color: "Valid" === s.validity ? "green" : "red" } }, [t._v(t._s(s.validity))])] } }, { key: "item.outcome", fn: function ({ item: s }) { return [e("span", { style: { color: "Complete" === s.outcome ? "green" : "red" } }, [t._v(t._s(s.outcome))])] } }]) })], 1), e(dt.Z, { attrs: { dark: "", right: "", "position-x": t.msgMenu.x, "position-y": t.msgMenu.y, "offset-x": t.offset, "close-on-content-click": t.closeOnClick }, model: { value: t.msgMenu.isShown, callback: function (e) { t.$set(t.msgMenu, "isShown", e) }, expression: "msgMenu.isShown" } }, [e(w.Z, { staticClass: "elevation-2" }, [e(S.EB, [t._v(t._s(t.msgMenu.selected.commandType) + " | " + t._s(t.msgMenu.selected.command))]), e(rt.Z), e(S.ZB, t._l(t.msgMenu.selected.params, (function (s, i) { return e(It.Z, { key: i, staticClass: "mx-2" }, [t._v(" " + t._s(s))]) })), 1)], 1)], 1)], 1) }, Lt = [function () { var t = this, e = t._self._c; return e("div", { staticClass: "text-center my-1" }, [e("h1", { staticClass: "darkgreen--text darken-1" }, [t._v("Responsiveness Metrics")])]) }], Wt = function () { var t = this, e = t._self._c; return e("div", { staticClass: "timeSeriesChart" }, [e("canvas", { attrs: { id: "timeSeriesChart" }, on: { click: function (e) { return t.drillDown(e) } } }), e(R.Z, { staticClass: "my-3" }, [e(F.Z, { staticClass: "text-end", attrs: { cols: "12" } }, [e(x.Z, { staticClass: "mx-3", attrs: { disabled: "SCRIPT" === t.executionLevel }, on: { click: function (e) { return t.resetChart() } } }, [t._v("Reset")]), e(x.Z, { staticClass: "mx-3", attrs: { disabled: "SCRIPT" === t.executionLevel }, on: { click: function (e) { return t.rollUp() } } }, [t._v("Back")])], 1)], 1)], 1) }, Ot = [], Ft = { name: "TimeSeriesChart", data() { return { dataSetJSON: { time: { label: "seconds", backgroundColor: "#aff", borderColor: "#09f", borderWidth: 2, tension: .3, fill: !1, radius: 4, pointStyle: "rectRounded", yAxisID: "y-axis-1", type: "line" } }, trace: [], current: {}, summary: {}, executionLevel: "", heading: "", subTitle: "", chartDetails: {} } }, mounted() { this.summary = execution_detail, this.current = this.summary.nestedExecutions[0], this.executionLevel = "SCRIPT", this.heading = this.current.name, this.subTitle = this.executionLevel, this.chartDetails = this.getChartDetails() }, methods: { getChartDetails() { const t = this.summary.nestedExecutions[0], e = t.nestedExecutions[0], s = e.nestedExecutions; return new Chart(document.getElementById("timeSeriesChart"), { type: "line", data: this.getChartData(s, this.getLabels(s)), options: this.getOptions(this.summary) }) }, getChartData(t, e) { return { labels: e, datasets: [{ ...this.dataSetJSON.time, data: this.getTime(t) }] } }, getLabels(t) { let e = []; return "SCRIPT" === this.current.executionLevel ? (t.forEach((t => { e.push(t.name) })), e) : ("SCENARIO" === this.current.executionLevel && t.forEach((t => { e.push(t.name) })), "ACTIVITY" === this.current.executionLevel && t.forEach((t => { e.push(t.command) })), e) }, getTime(t) { let e; if ("SCRIPT" === this.current.executionLevel) { let s = []; return t.forEach((t => { e = 0, t.nestedExecutions.forEach((t => { e += this.getSeconds(t.executionTime) })), s.push(e) })), s } if ("SCENARIO" === this.current.executionLevel) { let e = []; return t.forEach((t => { e.push(this.getSeconds(t.executionTime)) })), e } if ("ACTIVITY" === this.current.executionLevel) { let e = []; return t.forEach((t => { e.push(this.getSeconds(t.seconds)) })), e } }, getSeconds(t) { const e = Number((t % 6e4 / 1e3).toFixed(0)); return e }, getDuration(t, e) { return (new Date(t).getTime() - new Date(e).getTime()) / 6e4 }, drillDown(t) { let e = this.chartDetails.getElementsAtEventForMode(t, "nearest", { intersect: !0 }, !0); if (e.length) { if ("SCRIPT" === this.current.executionLevel) { let t = e[0].index; const s = this.current.nestedExecutions[0], i = s.nestedExecutions; this.current = i[t], this.trace.push(t) } else if ("SCENARIO" === this.current.executionLevel) { let t = e[0].index; const s = this.current.nestedExecutions; this.current = s[t], this.trace.push(t) } this.heading = this.getHeading(this.trace), this.updateChart() } }, updateChart() { let t = {}; "ACTIVITY" === this.current.executionLevel ? (t.labels = this.getLabels(this.current.actionCountMessages), t.datasets = [{ ...this.dataSetJSON.time, data: this.getTime(this.current.actionCountMessages) }]) : (console.log(this.getTime(this.current.nestedExecutions)), console.log(this.getLabels(this.current.nestedExecutions)), t.labels = this.getLabels(this.current.nestedExecutions), t.datasets = [{ ...this.dataSetJSON.time, data: this.getTime(this.current.nestedExecutions) }]), this.executionLevel = this.current.executionLevel; let e = { data: { labels: t.labels, datasets: t.datasets }, options: this.getOptions(this.current) }; this.chartDetails.data = e.data, this.chartDetails.options = e.options, this.chartDetails.update() }, getHeading(t) { if (this.trace.length > 0) { let e = [this.summary.nestedExecutions[0].name], s = this.summary.nestedExecutions[0].nestedExecutions[0]; for (let i = 0; i < this.trace.length; i++)s = s.nestedExecutions[t[i]], e.push(s.name); return e.join(" - ") } return this.executionLevel = "SCRIPT", this.summary.nestedExecutions[0].name }, getOptions(t) { return { scales: { x: { ticks: { stepSize: 1, beginAtZero: !0, font: { size: 14, weight: "bold", color: "white" } }, grid: { color: "#4c4c4c" } }, "y-axis-1": { ticks: { stepSize: 5, beginAtZero: !0, font: { size: 12 }, color: "white" }, grid: { color: "#4c4c4c" }, title: { display: !0, text: "seconds", font: { size: 16, weight: "bold", color: "rgba(50,50,50,0.75)" } } } }, responsive: !0, interaction: { intersect: !1 }, plugins: { tooltip: { mode: "index", position: "nearest" }, title: { display: !0, text: this.heading, font: { size: 18, weight: "bold", color: "rgba(50,50,50,0.95)" } }, subtitle: { display: !0, text: this.executionLevel, position: "bottom", align: "center", font: { size: 20, weight: "bold", color: "rgba(50,50,50,0.95)" } }, legend: { display: !0, position: "top", labels: { boxWidth: 10, padding: 25, usePointStyle: !0 } } } } }, resetChart() { this.executionLevel = "SCRIPT", this.trace = [], this.current = this.summary.nestedExecutions[0], this.executionLevel = "SCRIPT", this.heading = this.current.name, this.subTitle = this.executionLevel; const t = this.summary.nestedExecutions[0], e = t.nestedExecutions[0], s = e.nestedExecutions; this.chartDetails.data = this.getChartData(s, this.getLabels(s)), this.chartDetails.options = this.getOptions(s), this.chartDetails.update() }, rollUp() { if (!(this.trace.length < 0)) return 1 === this.trace.length ? (this.executionLevel = "SCRIPT", void this.resetChart()) : void (2 === this.trace.length && (this.executionLevel = "SCENARIO", this.current = this.summary.nestedExecutions[0].nestedExecutions[0].nestedExecutions[this.trace[0]], console.log(this.current), console.log(this.trace), this.trace.pop(), this.heading = this.getHeading(this.trace), this.updateChart())); alert("Invalid operation.") } } }, Pt = Ft, Rt = (0, y.Z)(Pt, Wt, Ot, !1, null, null, null), Mt = Rt.exports, $t = { name: "Complexity", components: { ActionCountChart: St, TimeSeriesChart: Mt }, data() { return { scriptItems: [], headers: [], expanded: [], singleExpand: !1, isExpanded: !1, scripts: [], dummyScripts: [], activities: [], scenarioItems: [], isActivity: !1, hideOverlay: !1, closeOnClick: !1, offset: !0, msgMenu: { isShown: !1, x: 0, y: 0, selected: {} } } }, mounted() { this.initialiseUI() }, methods: { initialiseUI() { if (window.complexity) { const t = window.complexity; this.scripts = t.map((t => ({ id: this.$uuid.v4(), name: t.scriptName, scenariosCount: t.scenarios.length, scenarios: t.scenarios.map((t => ({ id: this.$uuid.v4(), name: t.scenarioName, activitiesCount: t.activities.length, activities: t.activities.map((t => ({ id: this.$uuid.v4(), name: t.activityName, messagesCount: t.actionCount, ...t, actionMessagesList: t.actionMessagesList.map((t => ({ id: this.$uuid.v4(), ...t }))) }))) }))) }))) } else this.$router.push({ name: "upload" }); this.headers = [{ text: "Scenarios", value: "scenario" }, { text: "Tasks", value: "task" }, { text: "Steps", value: "step" }, { text: "Actions", value: "action" }, { text: "Validity", value: "validity" }, { text: "Outcome", value: "outcome" }, { text: "User Action Time", value: "userActionTime" }, { text: "System Delay", value: "systemDelay" }, { text: "Network Calls", value: "networkCalls" }], this.createTableData() }, createTableData() { this.scripts.forEach((t => { const e = { id: t.id, scenario: this.formatScriptName(t.name), task: t.scenarios.length, step: this.getSumOfTasks(t), action: this.getSumOfActions(t), validity: this.getScriptValidity(t), outcome: this.getScriptOutcome(t), userActionTime: this.getUserActionTimeForScript(t), systemDelay: this.getSystemDelayForScript(t), networkCalls: this.getNetworkCallsForScript(t) }; this.scriptItems.push(e), t.scenarios.forEach((t => { const e = { id: t.id, scenario: "", task: t.name, step: t.activities.length, action: this.getActionsInScenario(t), validity: this.getScenarioValidity(t), userActionTime: this.getUserActionTimeForScenario(t), systemDelay: this.getSystemDelayForScenario(t), outcome: this.getScenarioOutcome(t), networkCalls: this.getNetworkCallsForScenario(t) }; this.scriptItems.push(e), t.activities.forEach((t => { const e = { id: t.id, scenario: "", task: "", step: t.name, action: t.actionCount, validity: this.checkValidity(t), userActionTime: this.getUserActionTimeForTask(t), systemDelay: this.getSystemDelayForTask(t), outcome: t.outCome ? "Complete" : "Incomplete", networkCalls: this.getNetworkCallsForTask(t) }; this.scriptItems.push(e), t.actionMessagesList.forEach((async t => { const e = { id: t.id, scenario: "", task: "", step: "", action: t.insightMessage ? t.insightMessage : "(no message)", validity: t.isPassed ? "Valid" : "Invalid", outcome: "-", userActionTime: this.millisecondsToStr(t.userActionTime), systemDelay: this.millisecondsToStr(t.systemDelay), networkCalls: 0 === t.networkEntries.length ? "-" : t.networkEntries.length }; this.scriptItems.push(e) })) })) })) })) }, formatScriptName(t) { return t.split(".")[0] }, expandAll() { this.isExpanded ? this.expanded = [] : this.expanded = this.activities, this.isExpanded = !this.isExpanded }, checkValidity(t) { const e = t => !t.isPassed; return t.actionMessagesList.some(e) ? "Invalid" : "Valid" }, validityColor(t) { const e = t => !t.isPassed; return t.actionMessagesList.some(e) ? "red" : "green" }, getSumOfTasks(t) { let e = 0; return t.scenarios.forEach((t => { e += t.activities.length })), e }, getSumOfActions(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { e += t.actionCount })) })), e }, getActionsInScenario(t) { let e = 0; return t.activities.forEach((t => { e += t.actionCount })), e }, getScenarioUserActionTime(t) { let e = 0; return t.activities.forEach((t => { e += t.executionTime })), this.millisecondsToStr(e) }, getScriptUserActionTime(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { e += t.executionTime })) })), this.millisecondsToStr(e) }, getScenarioValidity(t) { let e = []; t.activities.forEach((t => { e.push(this.checkValidity(t)) })); const s = t => "Invalid" === t; return e.some(s) ? "Invalid" : "Valid" }, getScriptValidity(t) { let e = []; t.scenarios.forEach((t => { e.push(this.getScenarioValidity(t)) })); const s = t => "Invalid" === t; return e.some(s) ? "Invalid" : "Valid" }, getScenarioOutcome(t) { const e = t => !t.outCome; return t.activities.some(e) ? "Incomplete" : "Complete" }, getScriptOutcome(t) { let e = []; t.scenarios.forEach((t => { e.push(this.getScenarioOutcome(t)) })); const s = t => "Incomplete" === t; return e.some(s) ? "Incomplete" : "Complete" }, getSystemDelayForTask(t) { let e = 0; return t.actionMessagesList.forEach((t => { e += t.systemDelay })), this.millisecondsToStr(e) }, getUserActionTimeForTask(t) { let e = 0; return t.actionMessagesList.forEach((t => { e += t.userActionTime })), this.millisecondsToStr(e) }, getUserActionTimeForScenario(t) { let e = 0; return t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.userActionTime })) })), this.millisecondsToStr(e) }, getUserActionTimeForScript(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.userActionTime })) })) })), this.millisecondsToStr(e) }, getSystemDelayForScenario(t) { let e = 0; return t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.systemDelay })) })), this.millisecondsToStr(e) }, getSystemDelayForScript(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.systemDelay })) })) })), this.millisecondsToStr(e) }, getNetworkCallsForTask(t) { let e = 0; return t.actionMessagesList.forEach((t => { e += t.networkEntries.length })), e }, getNetworkCallsForScenario(t) { let e = 0; return t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.networkEntries.length })) })), e }, getNetworkCallsForScript(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.networkEntries.length })) })) })), e }, showMsgMenu(t, e) { t.preventDefault(), this.msgMenu.isShown = !1, this.msgMenu.x = t.clientX, this.msgMenu.y = t.clientY, this.timer = setTimeout((() => { this.$nextTick((() => { this.msgMenu.isShown = !0, this.msgMenu.selected = e })) }), 100) }, millisecondsToStr(t) { var e = t / 1e3; return `${e}s` }, itemRowBackground: function (t) { return t.actionCount > 5 && t.actionCount <= 10 ? "item-orange" : t.actionCount > 10 ? "item-red" : void 0 }, openPdf() { window.open("sample.pdf") } } }, Bt = $t, Vt = (0, y.Z)(Bt, Dt, Lt, !1, null, null, null), Ut = Vt.exports, jt = function () { var t = this, e = t._self._c; return e("div", [e("div", { staticClass: "my-8" }, [t._m(0), e(rt.Z, { staticClass: "my-4" }), e(R.Z, { staticClass: "featureListHeader" }, [e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "3" } }, [t._v(" Scenario ")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "3" } }, [t._v("Tasks")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v("Step")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "4" } }, [t._v("Actions")])], 1), t._l(t.scripts, (function (s, i) { return e("div", { staticClass: "featureListTable mt-2", staticStyle: { width: "100%" } }, [e(R.Z, [e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "3" } }, [t._v(t._s(s.nameOnly))]), e(F.Z, { attrs: { cols: "3" } }, [t._v(t._s(s.scenariosCount))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.tasks))]), e(F.Z, { attrs: { cols: "4" } }, [t._v(t._s(s.actions))])], 1), t._l(s.scenarios, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "3" } }), e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "3" } }, [t._v(t._s(s.name))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.activitiesCount))]), e(F.Z, { attrs: { cols: "4" } }, [t._v(t._s(s.actions))])], 1), t._l(s.activities, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "3" } }), e(F.Z, { attrs: { cols: "3" } }), e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "2" } }, [t._v(t._s(s.name))]), e(F.Z, { attrs: { cols: "4" } }, [t._v(t._s(s.messagesCount))])], 1), t._l(s.messages, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "3" } }), e(F.Z, { attrs: { cols: "3" } }), e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { attrs: { cols: "4" } }, [e("div", { staticClass: "pl-2", staticStyle: { "border-left": "1px solid white" } }, [t._v(" " + t._s(s.message) + " ")])])], 1)], 1) }))], 2) }))], 2) }))], 2) }))], 2)]) }, zt = [function () { var t = this, e = t._self._c; return e("div", { staticClass: "text-center my-1" }, [e("h1", { staticClass: "darkgreen--text darken-1" }, [t._v("Feature List")])]) }], Jt = { name: "FeatureList", data() { return { expanded: [], singleExpand: !1, isExpanded: !1, scripts: [], activities: [], hideOverlay: !1, closeOnClick: !1 } }, mounted() { this.initialiseUI() }, methods: { initialiseUI() { if (window.complexity) { const t = window.complexity; this.scripts = t.map((t => ({ name: t.scriptName, nameOnly: t.scriptName.split(".")[0], scenariosCount: t.scenarios.length, tasks: this.getSumOfTasks(t), actions: this.getSumOfActions(t), scenarios: t.scenarios.map((t => ({ name: t.scenarioName, activitiesCount: t.activities.length, actions: this.getActionsInScenario(t), activities: t.activities.map((t => ({ name: t.activityName, messagesCount: t.actionCount, messages: t.actionMessagesList.map((t => ({ message: t.insightMessage ? t.insightMessage : "(no message)" }))) }))) }))) }))) } else this.$router.push({ name: "upload" }) }, getSumOfTasks(t) { let e = 0; return t.scenarios.forEach((t => { e += t.activities.length })), e }, getSumOfActions(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { e += t.actionCount })) })), e }, getActionsInScenario(t) { let e = 0; return t.activities.forEach((t => { e += t.actionCount })), e }, millisecondsToStr(t) { var e = t / 1e3; return `${e}s` } } }, qt = Jt, Ht = (0, y.Z)(qt, jt, zt, !1, null, null, null), Xt = Ht.exports, Yt = function () { var t = this, e = t._self._c; return e("div", [e("div", { staticClass: "my-8" }, [t._m(0), e(rt.Z, { staticClass: "my-4" }), e(w.Z, { staticClass: "summary", attrs: { elevation: "9", outlined: "", rounded: "lg" } }, [e(S.EB, { staticClass: "font-weight-bold" }, [t._v("Summary")]), e(S.ZB, [e(R.Z, [e(F.Z, { attrs: { cols: "4" } }, [e(ht.Z, { staticClass: "summary_details", scopedSlots: t._u([{ key: "default", fn: function () { return [e("tbody", t._l(t.summary_details, (function (s) { return e("tr", { key: s.key }, [e("td", [t._v(t._s(s.key))]), e("td", [t._v(t._s(s.value))])]) })), 0)] }, proxy: !0 }]) })], 1), e(rt.Z, { staticClass: "mr-4 mb-3 verticalDivderInMetricsSummary", attrs: { thickness: 8, vertical: "" } }), e(F.Z, { attrs: { cols: "3" } }, [e(ht.Z, { staticClass: "metrics_details", scopedSlots: t._u([{ key: "default", fn: function () { return [e("tbody", [e("tr", [e("th", { staticClass: "header-metrics-details" }, [t._v("Categories")]), e("th", { staticClass: "header-metrics-details" }, [t._v("Violations")])]), t._l(t.metrics_details, (function (s) { return e("tr", { key: s.key }, [e("td", [t._v(t._s(s.key))]), e("td", [t._v(t._s(s.value))])]) }))], 2)] }, proxy: !0 }]) })], 1)], 1)], 1)], 1), e(rt.Z, { staticClass: "my-4" }), e(R.Z, { staticClass: "headers" }, [e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v("Tasks")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v("Steps")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "3" } }, [t._v("Actions")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "1" } }, [t._v("Content")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "1" } }, [t._v("Alt")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "1" } }, [t._v("Aria Label ")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "1" } }, [t._v("Tool Tip ")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "1" } }, [t._v("Title ")])], 1), t._l(t.scripts, (function (s, i) { return e("div", { staticClass: "actualTable", staticStyle: { width: "100%" } }, t._l(s.scenarios, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "2" } }, [t._v(t._s(s.name))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.activitiesCount))]), e(F.Z, { attrs: { cols: "3" } }, [t._v(t._s(s.actions))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(t._s(s.wordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.altWordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.ariaLabelWordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.toolTipWordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.titleWordCount))])], 1), t._l(s.activities, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "2" } }, [t._v(t._s(s.name))]), e(F.Z, { attrs: { cols: "3" } }, [t._v(t._s(s.messagesCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.wordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.altWordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.ariaLabelWordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.toolTipWordCount))]), e(F.Z, { attrs: { cols: "1" } }, [t._v(" " + t._s(s.titleWordCount))])], 1), t._l(s.i18NDataList, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { attrs: { cols: "3" } }, [e("div", { staticStyle: { display: "flex" } }, [e("div", { staticClass: "pl-2", staticStyle: { "border-left": "1px solid white" } }, [t._v(" " + t._s(s.message) + " ")])])]), e(F.Z, { class: t.isScreenshotBtnDisabled(s.elements) ? "color_red" : "color_green", attrs: { cols: "1" }, on: { click: function (e) { return t.showElements(s.elements) } } }, [t._v(" " + t._s(s.wordCount))]), e(F.Z, { class: t.isScreenshotBtnDisabled(s.alts) ? "color_red" : "color_green", attrs: { cols: "1" }, on: { click: function (e) { return t.showElements(s.alts) } } }, [t._v(" " + t._s(s.altWordCount))]), e(F.Z, { class: t.isScreenshotBtnDisabled(s.ariaLabels) ? "color_red" : "color_green", attrs: { cols: "1" }, on: { click: function (e) { return t.showElements(s.ariaLabels) } } }, [t._v(" " + t._s(s.ariaLabelWordCount))]), e(F.Z, { class: t.isScreenshotBtnDisabled(s.toolTips) ? "color_red" : "color_green", attrs: { cols: "1" }, on: { click: function (e) { return t.showElements(s.toolTips) } } }, [t._v(" " + t._s(s.toolTipWordCount))]), e(F.Z, { class: t.isScreenshotBtnDisabled(s.title) ? "color_red" : "color_green", attrs: { cols: "1" }, on: { click: function (e) { return t.showElements(s.title) } } }, [t._v(" " + t._s(s.titleWordCount))])], 1)], 1) }))], 2) }))], 2) })), 0) }))], 2), e(ot.Z, { attrs: { "content-class": "no-dialog-overflow", "max-width": "1000", "auto-grow": "", "hide-overlay": t.hideOverlay }, model: { value: t.elementDialog, callback: function (e) { t.elementDialog = e }, expression: "elementDialog" } }, [e(w.Z, { staticClass: "elevation-2 dialog_images" }, [e(S.EB, { staticClass: "text-h5" }, [e(R.Z, [e(F.Z, { attrs: { cols: "11" } }, [t._v("Elements")]), e(F.Z, { staticClass: "text-end", attrs: { cols: "1" } }, [e(x.Z, { attrs: { icon: "" }, on: { click: function (e) { t.elementDialog = !1 } } }, [e(l.Z, [t._v("fas fa-close")])], 1)], 1)], 1)], 1), e(S.ZB, t._l(t.elements, (function (s, i) { return e("div", { key: i }, [e(R.Z, [e(F.Z, { attrs: { cols: "auto" } }, [e("div", { staticClass: "element-screenshot", on: { click: function (e) { return t.showImage(s.imagePath) } } }, [s.imagePath ? e(w.Z, { staticClass: "portrait i18NImagesCard", attrs: { ripple: !1 } }, [e("img", { staticClass: "i18NImages", staticStyle: { width: "auto", height: "auto", "max-width": "200px", "max-height": "150px" }, attrs: { src: s.imagePath } })]) : t._e()], 1)]), e(F.Z, { staticClass: "codeSnippetAndWords", attrs: { cols: "8" } }, [e(R.Z, [e("div", { staticClass: "teal--text" }, [e("code", [t._v(" " + t._s(s.htmlSnippet) + " ")])])]), e(rt.Z, { staticClass: "my-4" }), e(R.Z, [e("div", { staticClass: "teal--text" }, [t._v(" " + t._s(t.getWordsSepreatedByComma(s.words)) + " ")])])], 1)], 1)], 1) })), 0)], 1)], 1), e(ot.Z, { attrs: { "content-class": "no-dialog-overflow", fullscreen: "", "hide-overlay": t.hideOverlay }, model: { value: t.imageDialog, callback: function (e) { t.imageDialog = e }, expression: "imageDialog" } }, [e(w.Z, { staticClass: "elevation-2 dialog_images" }, [e(S.ZB, [e("div", { staticClass: "text-center", on: { click: function (e) { t.imageDialog = !1 } } }, [e("div", { staticClass: "element-screenshot__overlay" }, [e("div", { staticClass: "element-screenshot" }, [e("div", { staticClass: "element-screenshot__content" }, [e("div", { staticClass: "element-screenshot__image", style: { "background-size": "100%", "background-image": `url(${t.baseImage})`, position: "relative", width: `${t.dimension.width}px`, height: `${t.dimension.height}px` } })])])])])])], 1)], 1)], 1) }, Gt = [function () { var t = this, e = t._self._c; return e("div", { staticClass: "text-center my-1" }, [e("h2", { staticClass: "heading darkgreen--text darken-1" }, [t._v("Internationalization Metrics")])]) }], Kt = { name: "Internationalization", data() { return { elementDialog: !1, scripts: [], showMenu: !1, closeOnClick: !0, dimension: {}, baseImage: "", imageDialog: !1, hideOverlay: !1, elements: [], closeOnClick: !1, x: 0, y: 0, img: "", totalIssues: "", onlyName: "", summary_details: [], metrics_details: [] } }, mounted() { this.initialiseUI(), this.totalIssues = this.scripts[0].wordCount + this.scripts[0].altWordCount + this.scripts[0].toolTipWordCount + this.scripts[0].ariaLabelWordCount + this.scripts[0].titleWordCount, this.onlyName = this.scripts[0].name.split(".")[0], this.summary_details = [{ key: "Name", value: this.onlyName }, { key: "Target language", value: this.scripts[0].language }, { key: "Tasks", value: this.scripts[0].scenariosCount }, { key: "Steps", value: this.scripts[0].tasks }, { key: "Actions", value: this.scripts[0].actions }], this.metrics_details = [{ key: "Content", value: this.scripts[0].wordCount }, { key: "Title", value: this.scripts[0].titleWordCount }, { key: "Aria label", value: this.scripts[0].ariaLabelWordCount }, { key: "Tool Tip", value: this.scripts[0].toolTipWordCount }, { key: "Alt", value: this.scripts[0].altWordCount }, { key: "Total", value: this.totalIssues }] }, methods: { initialiseUI() { if (window.i18N) { const t = window.i18N; console.log(window.i18N), this.scripts = t.map((t => ({ name: t.scriptName, language: t.language, scenariosCount: t.scenarios.length, tasks: this.getSumOfTasks(t), actions: this.getSumOfActions(t), wordCount: this.getScriptWordCount(t), altWordCount: this.getAltWordCountForScript(t), ariaLabelWordCount: this.getAriaLabelWordCountForScript(t), toolTipWordCount: this.getTooltipWordCountForScript(t), titleWordCount: this.getTitleWordCountForScript(t), scenarios: t.scenarios.map((t => ({ name: t.scenarioName, activitiesCount: t.activities.length, actions: this.getActionsInScenario(t), wordCount: this.getScenarioWordCount(t), altWordCount: this.getAltWordCountForScenario(t), ariaLabelWordCount: this.getAriaLabelWordCountForScenario(t), toolTipWordCount: this.getTooltipWordCountForScenario(t), titleWordCount: this.getTitleWordCountForScenario(t), activities: t.activities.map((t => ({ name: t.activityName, messagesCount: t.i18NDataList.length, wordCount: this.getActivityWordCount(t), altWordCount: this.getAltWordCountForActivity(t), ariaLabelWordCount: this.getAriaLabelWordCountForActivity(t), toolTipWordCount: this.getTooltipWordCountForActivity(t), titleWordCount: this.getTitleWordCountForActivity(t), i18NDataList: t.i18NDataList.map((t => ({ message: t.insightMessage ? t.insightMessage : "(no message)", image: t.screenshot, elements: t.data ? this.getElements(t.data) : [], alts: t.data ? t.data[0].alts : [], ariaLabels: t.data ? t.data[0].ariaLabels : [], title: t.data ? t.data[0].tittle : [], toolTips: t.data ? t.data[0].toolTips : [], wordCount: t.data ? this.getWordCount(t.data) : 0, altWordCount: this.getAltWordCount(t.data), ariaLabelWordCount: this.getAriaLabelWordCount(t.data), toolTipWordCount: this.getToolTipWordCount(t.data), titleWordCount: this.getTitleWordCount(t.data) }))) }))) }))) }))) } else this.$router.push({ name: "upload" }) }, getSumOfTasks(t) { let e = 0; return t.scenarios.forEach((t => { e += t.activities.length })), e }, getSumOfActions(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { e += t.i18NDataList.length })) })), e }, getActionsInScenario(t) { let e = 0; return t.activities.forEach((t => { e += t.i18NDataList.length })), e }, getWordCount(t) { let e = 0; return t.forEach((t => { const { contents: s } = t; s.forEach((t => { e += t.words.length })) })), e }, getAltWordCount(t) { let e = 0; return t.forEach((t => { const { alts: s } = t; s.forEach((t => { e += t.words.length })) })), e }, getTitleWordCount(t) { let e = 0; return t.forEach((t => { const { tittle: s } = t; s.forEach((t => { e += t.words.length })) })), e }, getAriaLabelWordCount(t) { let e = 0; return t.forEach((t => { const { ariaLabels: s } = t; s.forEach((t => { e += t.words.length })) })), e }, getToolTipWordCount(t) { let e = 0; return t.forEach((t => { const { toolTips: s } = t; s.forEach((t => { e += t.words.length })) })), e }, getActivityWordCount(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getWordCount(t.data) })), e }, getTooltipWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getToolTipWordCount(t.data) })), e }, getAriaLabelWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getAriaLabelWordCount(t.data) })), e }, getAltWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getAltWordCount(t.data) })), e }, getTitleWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getTitleWordCount(t.data) })), e }, getScenarioWordCount(t) { let e = 0; return t.activities.forEach((t => { e += this.getActivityWordCount(t) })), e }, getTooltipWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getTooltipWordCountForActivity(t) })), e }, getAriaLabelWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getAriaLabelWordCountForActivity(t) })), e }, getAltWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getAltWordCountForActivity(t) })), e }, getTitleWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getTitleWordCountForActivity(t) })), e }, getScriptWordCount(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getScenarioWordCount(t) })), e }, getAltWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getAltWordCountForScenario(t) })), e }, getAriaLabelWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getAriaLabelWordCountForScenario(t) })), e }, getTooltipWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getTooltipWordCountForScenario(t) })), e }, getTitleWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getTitleWordCountForScenario(t) })), e }, getElements(t) { let e = []; return t[0].contents.forEach((t => { e.push(t) })), e.flat() }, millisecondsToStr(t) { var e = t / 1e3; return `${e}s` }, getDimensions(t) { return new Promise(((e, s) => { var i = new Image; i.src = t, i.onload = () => { e({ width: i.width, height: i.height }) } })) }, showElements(t) { this.elements = t, this.elementDialog = !0 }, async showImage(t) { this.baseImage = "", this.imageDialog = !0, this.dimension = await this.getDimensions(t), this.baseImage = t }, isScreenshotBtnDisabled(t) { return 0 !== t.length }, getWordsSepreatedByComma(t) { let e = ""; return 1 != t.length ? t.forEach((t => { e += t.word + "," })) : e = t[0].word, this.decodeHTML(e) }, decodeHTML(t) { return t ? decodeURI(t) : "" }, trimScriptName(t) { return t ? t.split(".")[0] : "" } } }, Qt = Kt, te = (0, y.Z)(Qt, Yt, Gt, !1, null, null, null), ee = te.exports, se = function () { var t = this, e = t._self._c; return e("div", { staticClass: "my-8" }, [t._m(0), e(rt.Z, { staticClass: "my-4" }), e(R.Z, { staticClass: "headerNetworkLoad" }, [e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v(" Scenario ")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v("Tasks")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v("Step")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v("Actions")]), e(F.Z, { staticClass: "font-weight-bold text-h6", attrs: { cols: "2" } }, [t._v("Network Calls")])], 1), t._l(t.scripts, (function (s, i) { return e("div", { staticClass: "actualTableNetworkLoad", staticStyle: { width: "100%" } }, [e(R.Z, [e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "2" } }, [t._v(t._s(s.onlyName))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.scenariosCount))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.tasks))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.actions))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.entries))])], 1), t._l(s.scenarios, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "2" } }, [t._v(t._s(s.name))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.activitiesCount))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.actions))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.entries))])], 1), t._l(s.activities, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { staticClass: "font-weight-bold name", attrs: { cols: "2" } }, [t._v(t._s(s.name))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.actions))]), e(F.Z, { attrs: { cols: "2" } }, [t._v(t._s(s.entries))])], 1), t._l(s.networkLoad, (function (s, i) { return e("div", [e(R.Z, [e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { attrs: { cols: "2" } }), e(F.Z, { attrs: { cols: "2" } }, [e("div", { staticClass: "pl-2", staticStyle: { "border-left": "1px solid white" } }, [t._v(" " + t._s(s.description) + " ")])]), e(F.Z, { attrs: { cols: "1" } }, [t._v(t._s(s.entries))])], 1)], 1) }))], 2) }))], 2) }))], 2) }))], 2) }, ie = [function () { var t = this, e = t._self._c; return e("div", { staticClass: "text-center my-1" }, [e("h2", { staticClass: "heading darkgreen--text darken-1" }, [t._v("Network Load")])]) }], ae = { name: "NetworkLoad", data() { return { scripts: [] } }, mounted() { this.initializeUI() }, methods: { initializeUI() { if (window.networkLoad) { const t = window.networkLoad; this.scripts = t.map((t => ({ name: t.scriptName, onlyName: t.scriptName.split(".")[0], scenariosCount: t.scenarios.length, tasks: this.getSumOfTasks(t), actions: this.getSumOfActions(t), entries: this.getEntriesOfScripts(t), scenarios: t.scenarios.map((t => ({ name: t.scenarioName, activitiesCount: t.activities.length, actions: this.getActionsInScenario(t), entries: this.getEntriesOfScenario(t), activities: t.activities.map((t => ({ name: t.activityName, actions: t.networkLoads.length, entries: this.getEntriesOfActivities(t), networkLoad: t.networkLoads.map((t => ({ description: t.description, entries: t.networkCalls.length }))) }))) }))) }))) } else this.$router.push({ name: "upload" }) }, getEntriesOfScripts(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getEntriesOfScenario(t) })), e }, getEntriesOfScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getEntriesOfActivities(t) })), e }, getEntriesOfActivities(t) { let e = 0; return t.networkLoads.forEach((t => { e += t.networkCalls.length })), e }, getSumOfTasks(t) { let e = 0; return t.scenarios.forEach((t => { e += t.activities.length })), e }, getSumOfActions(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { e += t.networkLoads.length })) })), e }, getActionsInScenario(t) { let e = 0; return t.activities.forEach((t => { e += t.networkLoads.length })), e } } }, oe = ae, re = (0, y.Z)(oe, se, ie, !1, null, null, null), ne = re.exports, ce = s(2515), le = function () { var t = this, e = t._self._c; return e("div", [e("h1", { staticClass: "pa-3" }, [t._v("Quantitative User Metrics")]), e(R.Z, [e(F.Z, { attrs: { cols: "4" } }, [e(ht.Z, { scopedSlots: t._u([{ key: "default", fn: function () { return [e("tbody", [e("tr", [e("td", [t._v("Application Name")]), e("td", [t._v("Humanetics Website")])]), e("tr", [e("td", [t._v("Application URL")]), e("td", [e("a", { attrs: { href: "https://www.humanetics.com" } }, [t._v("https://www.humanetics.com")])])]), e("tr", [e("td", [t._v("Date of Evaluation")]), e("td", [t._v("07-July-2023")])]), e("tr", [e("td", [t._v("Report Version")]), e("td", [t._v("1.1")])])])] }, proxy: !0 }]) })], 1)], 1), e("div", { staticClass: "wrapper__div" }, [e(w.Z, { staticStyle: { margin: "15px" }, attrs: { width: "45%" } }, [e(S.EB, { staticClass: "text-h5 darkgreen darken-1 mb-4" }, [e(R.Z, [e(F.Z, { attrs: { cols: "11" } }, [e("span", { staticClass: "white--text" }, [t._v("Feature List Summary")])])], 1)], 1), e(S.ZB, [e(ht.Z, { scopedSlots: t._u([{ key: "default", fn: function () { return [e("tbody", [e("tr", [e("td", [t._v("Number of "), e("b", [t._v("Scenarios")])]), e("td", [e("b", [t._v(t._s(t.featureListData.scenarios))])])]), e("tr", [e("td", [t._v("Total Number of "), e("b", [t._v("Tasks")])]), e("td", [e("b", [t._v(t._s(t.featureListData.tasks))])])]), e("tr", [e("td", [t._v("Total Number of "), e("b", [t._v("Steps")])]), e("td", [e("b", [t._v(t._s(t.featureListData.steps))])])]), e("tr", [e("td", [t._v("Total Number of "), e("b", [t._v("Actions")])]), e("td", [e("b", [t._v(t._s(t.featureListData.actions))])])])])] }, proxy: !0 }]) })], 1), e(rt.Z), e(S.h7, [e(ce.Z), e(x.Z, { staticClass: "white--text", attrs: { color: "darkgreen darken-1" }, on: { click: function (e) { return t.openTab("feature") } } }, [t._v(" See Details ")])], 1)], 1), t.showResponsivenessCard ? e(w.Z, { staticStyle: { margin: "15px" }, attrs: { width: "45%" } }, [e(S.EB, { staticClass: "text-h5 darkgreen darken-1 mb-4" }, [e(R.Z, [e(F.Z, { attrs: { cols: "11" } }, [e("span", { staticClass: "white--text" }, [t._v("Responsiveness Summary")])])], 1)], 1), e(S.ZB, [e(ht.Z, { scopedSlots: t._u([{ key: "default", fn: function () { return [e("tbody", [e("tr", [e("td", [t._v("Total Number of "), e("b", [t._v("Tasks")])]), e("td", [t._v(t._s(t.responsivenessReportData.tasks))])]), e("tr", [e("td", [t._v("Average "), e("b", [t._v("User Action Time")]), t._v(" Per Task")]), e("td", [t._v(t._s(t.responsivenessReportData.avgUserActionTime))])]), e("tr", [e("td", [t._v("Average "), e("b", [t._v("System Delay")]), t._v(" Per Task")]), e("td", [t._v(t._s(t.responsivenessReportData.avgSystemDelay))])]), e("tr", [e("td", [t._v("Average "), e("b", [t._v("Network Calls")]), t._v(" Per Task")]), e("td", [t._v(t._s(t.responsivenessReportData.avgNetworkCalls))])])])] }, proxy: !0 }], null, !1, 2412953236) })], 1), e(rt.Z), e(S.h7, [e(ce.Z), e(x.Z, { staticClass: "white--text", attrs: { color: "darkgreen darken-1" }, on: { click: function (e) { return t.openTab("complexity") } } }, [t._v(" See Details ")])], 1)], 1) : t._e(), t.showi18NCard ? e(w.Z, { staticStyle: { margin: "15px" }, attrs: { width: "45%" } }, [e(S.EB, { staticClass: "text-h5 darkgreen darken-1 mb-4" }, [e(R.Z, [e(F.Z, { attrs: { cols: "11" } }, [e("span", { staticClass: "white--text" }, [t._v("Internationalization Summary")])])], 1)], 1), e(S.ZB, [e(ht.Z, { scopedSlots: t._u([{ key: "default", fn: function () { return [e("tbody", [e("tr", [e("td", [t._v("Total Number of "), e("b", [t._v("Tasks")])]), e("td", [e("b", [t._v(t._s(t.i18NReportData.tasks))])])]), e("tr", [e("td", [e("b", [t._v("Languages")]), t._v(" Supported")]), e("td", [e("b", [t._v(t._s(t.i18NReportData.languagesSupported))])])]), e("tr", [e("td", [t._v("Average Number of "), e("b", [t._v("Violations")]), t._v(" Per Task for English")]), e("td", [e("b", [t._v(t._s(t.i18NReportData.avgViolations))])])])])] }, proxy: !0 }], null, !1, 1427461617) })], 1), e(rt.Z), e(S.h7, [e(ce.Z), e(x.Z, { staticClass: "white--text", attrs: { color: "darkgreen darken-1" }, on: { click: function (e) { return t.openTab("i18N") } } }, [t._v(" See Details ")])], 1)], 1) : t._e(), t.showAccessibilityCard ? e(w.Z, { staticStyle: { margin: "15px" }, attrs: { width: "45%" } }, [e(S.EB, { staticClass: "text-h5 darkgreen darken-1 mb-4" }, [e(R.Z, [e(F.Z, { attrs: { cols: "11" } }, [e("span", { staticClass: "white--text" }, [t._v("Accessibility Summary")])])], 1)], 1), e(S.ZB, [e(ht.Z, { scopedSlots: t._u([{ key: "default", fn: function () { return [e("tbody", [e("tr", [e("td", [t._v("Total Number of "), e("b", [t._v("Tasks")])]), e("td", [e("b", [t._v(t._s(t.accessibilityReportData.tasks))])])]), e("tr", [e("td", [t._v("Average Number of Violations Per Task for "), e("b", [t._v("Critical")]), t._v(" Category")]), e("td", [e("b", [t._v(t._s(t.accessibilityReportData.criticalVialations))])])]), e("tr", [e("td", [t._v("Average Number of Violations Per Task for "), e("b", [t._v("Serious")]), t._v(" Category")]), e("td", [e("b", [t._v(t._s(t.accessibilityReportData.seriousViolations))])])]), e("tr", [e("td", [t._v("Average Number of Violations Per Task for "), e("b", [t._v("Moderate")]), t._v(" Category")]), e("td", [e("b", [t._v(t._s(t.accessibilityReportData.moderateViolations))])])]), e("tr", [e("td", [t._v("Average Number of Violations Per Task for "), e("b", [t._v("Minor")]), t._v(" Category")]), e("td", [e("b", [t._v(t._s(t.accessibilityReportData.minorViolations))])])])])] }, proxy: !0 }], null, !1, 1353940577) })], 1), e(rt.Z), e(S.h7, [e(ce.Z), e(x.Z, { staticClass: "white--text", attrs: { color: "darkgreen darken-1" }, on: { click: function (e) { return t.openTab("accessibility") } } }, [t._v(" See Details ")])], 1)], 1) : t._e()], 1)], 1) }, ue = [], de = { name: "SummaryReport", data() { return { showResponsivenessCard: !1, showi18NCard: !1, showAccessibilityCard: !1, featureListData: {}, responsivenessReportData: {}, i18NReportData: {}, accessibilityReportData: {}, pagesList: ["features", "responsiveness", "i18N", "accessibility"] } }, mounted() { const t = window.features, e = t[0].scenarios.length; if (this.featureListData = { scenarios: t.length, tasks: e, steps: this.getSumOfTasks(t[0]), actions: this.getSumOfActions(t[0]) }, window.complexity) { this.showResponsivenessCard = !0; const t = window.complexity; this.responsivenessReportData = { tasks: t[0].scenarios.length, avgUserActionTime: this.getUserActionTimeForScript(t[0]), avgSystemDelay: this.getSystemDelayForScript(t[0]), avgNetworkCalls: this.getNetworkCallsForScript(t[0]) / t[0].scenarios.length } } if (window.accessibility) { this.showAccessibilityCard = !0; const t = window.accessibility, { scenarios: e } = t[0]; this.accessibilityReportData = { tasks: e.length, seriousViolations: this.getAvgNoOfViolations(e, "serious"), criticalVialations: this.getAvgNoOfViolations(e, "critical"), moderateViolations: this.getAvgNoOfViolations(e, "moderate"), minorViolations: this.getAvgNoOfViolations(e, "minor") } } if (window.i18N) { this.showi18NCard = !0; const t = window.i18N, e = this.getScriptWordCount(t[0]) + this.getAltWordCountForScript(t[0]) + this.getAriaLabelWordCountForScript(t[0]) + this.getTooltipWordCountForScript(t[0]) + this.getTitleWordCountForScript(t[0]); this.i18NReportData = { tasks: t[0].scenarios.length, languagesSupported: t[0].language, avgViolations: e / t[0].scenarios.length } } window.browserPerformance }, methods: { openTab(t) { let e, s; "feature" === t && (e = "Feature List", s = "FeatureList"), "complexity" === t && (e = "Complexity", s = "Complexity"), "accessibility" === t && (e = "WCAG", s = "Accessibility"), "i18N" === t && (e = "Internationalization (I18N)", s = "Internationalization"); const i = { displayName: e, componentName: s, type: t, icon: "fa-chart-simple", hoverText: "", children: [], disabled: !0 }; this.$root.$emit("openTab", i) }, getSumOfTasks(t) { let e = 0; return t.scenarios.forEach((t => { e += t.activities.length })), e }, getSumOfActions(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { e += t.actionMessagesList.length })) })), e }, getUserActionTimeForScript(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.userActionTime })) })) })), this.millisecondsToStr(e / t.scenarios.length) }, getSystemDelayForScript(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { t.actionMessagesList.forEach((t => { e += t.systemDelay })) })) })), this.millisecondsToStr(e / t.scenarios.length) }, getNetworkCallsForScript(t) { let e = 0; return t.scenarios.forEach((t => { t.activities.forEach((t => { t.actionMessagesList.forEach((t => { t.networkEntries && (e += t.networkEntries.length) })) })) })), e }, millisecondsToStr(t) { var e = t / 1e3; return `${e}s` }, getWordCount(t) { let e = 0; return t.forEach((t => { const { contents: s } = t; e += s.length })), e }, getAltWordCount(t) { let e = 0; return t.forEach((t => { const { alts: s } = t; e += s.length })), e }, getTitleWordCount(t) { let e = 0; return t.forEach((t => { const { tittle: s } = t; e += s.length })), e }, getAriaLabelWordCount(t) { let e = 0; return t.forEach((t => { const { ariaLabels: s } = t; e += s.length })), e }, getToolTipWordCount(t) { let e = 0; return t.forEach((t => { const { toolTips: s } = t; e += s.length })), e }, getActivityWordCount(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getWordCount(t.data) })), e }, getTooltipWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getToolTipWordCount(t.data) })), e }, getAriaLabelWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getAriaLabelWordCount(t.data) })), e }, getAltWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getAltWordCount(t.data) })), e }, getTitleWordCountForActivity(t) { let e = 0; return t.i18NDataList.forEach((t => { e += this.getTitleWordCount(t.data) })), e }, getScenarioWordCount(t) { let e = 0; return t.activities.forEach((t => { e += this.getActivityWordCount(t) })), e }, getTooltipWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getTooltipWordCountForActivity(t) })), e }, getAriaLabelWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getAriaLabelWordCountForActivity(t) })), e }, getAltWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getAltWordCountForActivity(t) })), e }, getTitleWordCountForScenario(t) { let e = 0; return t.activities.forEach((t => { e += this.getTitleWordCountForActivity(t) })), e }, getScriptWordCount(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getScenarioWordCount(t) })), e }, getAltWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getAltWordCountForScenario(t) })), e }, getAriaLabelWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getAriaLabelWordCountForScenario(t) })), e }, getTooltipWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getTooltipWordCountForScenario(t) })), e }, getTitleWordCountForScript(t) { let e = 0; return t.scenarios.forEach((t => { e += this.getTitleWordCountForScenario(t) })), e }, getAvgNoOfViolations(t, e) { let s = 0; return t.forEach((t => { t.activities.forEach((t => { t.accessibilityData.forEach((t => { t.errors.filter((t => { t.impact == e && (s += t.errNodes.length) })) })) })) })), s / t.length } } }, he = de, me = (0, y.Z)(he, le, ue, !1, null, null, null), pe = me.exports, ge = function () { var t = this, e = t._self._c; return e("div", { staticClass: "my-6" }, [e(R.Z, { staticStyle: { height: "100vh" }, attrs: { justify: "center", align: "center" } }, [e(F.Z, { staticClass: "text-center", attrs: { cols: "8" } }, [e("div", { staticClass: "dropzone-container", on: { click: t.onJsonUpload } }, [e("div", { staticClass: "file-selector" }, [t._v(" Click here to select your JSON file. ")])]), e("input", { ref: "uploader", staticClass: "d-none", attrs: { type: "file" }, on: { change: t.onFileChanged } })])], 1)], 1) }, ve = [], fe = { name: "Upload", data() { return { enabled: [] } }, methods: { onFileChanged(t) { this.selectedFile = t.target.files[0]; const e = new FileReader; e.readAsText(this.selectedFile), e.onload = t => { window.features = this.findItem(t.target.result, "features"), window.complexity = this.findItem(t.target.result, "complexity"), window.i18N = this.findItem(t.target.result, "i18N"), window.accessibility = this.findItem(t.target.result, "accessibility"), window.browserPerformance = this.findItem(t.target.result, "browserPerformance"), window.header = this.findItem(t.target.result, "header"), this.checkForSideTabs(), this.enabled.push("summaryReport"), this.$store.commit("setLoaded", !0), this.$router.push({ name: "home" }) } }, onJsonUpload() { window.addEventListener("focus", (() => { }), { once: !0 }), this.$refs.uploader.click() }, findItem(t, e) { const s = JSON.parse(t).find((t => t.category === e)); if (s) return this.enabled.push(e), this.$store.commit("setEnabled", this.enabled), s.data }, checkForSideTabs() { window.complexity && this.config.components.push({ displayName: "Complexity", componentName: "Complexity", type: "complexity", icon: "fa-chart-bar", hoverText: "", children: [], disabled: !0 }), window.accessibility && this.config.components.push({ displayName: "WCAG", componentName: "Accessibility", type: "accessibility", icon: "fa-universal-access", hoverText: "", children: [], disabled: !0 }), window.i18N && this.config.components.push({ displayName: "Internationalization (I18N)", componentName: "Internationalization", type: "i18N", icon: "fa-globe", hoverText: "", children: [], disabled: !0 }), window.browserPerformance && this.config.components.push({ displayName: "Browser Performance Metrics", componentName: "BrowserMetrics", type: "browserPerformance", icon: "fa-chart-column", hoverText: "", children: [], disabled: !0 }) } } }, Ce = fe, ye = (0, y.Z)(Ce, ge, ve, !1, null, null, null), be = ye.exports, _e = (s(8556), s(8986)); i.ZP.use(_e.Z); var xe = new _e.Z({ icons: { iconfont: "fa" }, theme: { themes: { light: { darkgreen: "#05758a" } } } }), we = s(1978); const Se = { components: [{ displayName: "Summary Report", componentName: "SummaryReport", type: "summaryReport", icon: "fa-clipboard-list", hoverText: "", children: [], disabled: !0 }] }; var Ze = Se, ke = s(629); i.ZP.use(ke.ZP); var Ee = new ke.ZP.Store({ state: { enabled: [], loaded: !1 }, mutations: { setEnabled(t, e) { t.enabled = e }, setLoaded(t, e) { t.loaded = e } } }), Te = s(4903), Ne = s(8409); i.ZP.use(Te.ZP); var Ae = new Te.ZP({ base: Ne.publicPath, routes: [{ path: "/", name: "home", component: it }, { path: "/upload", name: "upload", component: be }] }); i.ZP.use(we.Z), i.ZP.mixin({ data: function () { return { config: Ze } }, methods: { truncate(t, e) { return t && e && t.length > e ? t.substring(0, e) + "..." : t }, makeId(t, e) { for (var s = "", i = "abcdefghijklmnopqrstuvwxyza", a = i.length, o = 0; o < t; o++)s += i.charAt(Math.floor(Math.random() * a)); return e ? `${e}${s}` : s } } }), i.ZP.config.productionTip = !1, i.ZP.component("SummaryReport", pe), i.ZP.component("Complexity", Ut), i.ZP.component("FeatureList", Xt), i.ZP.component("Internationalization", ee), i.ZP.component("Accessibility", Ct), i.ZP.component("ActionCountChart", St), i.ZP.component("TimeSeriesChart", Mt), i.ZP.component("Upload", be), i.ZP.component("NetworkLoad", ne), i.ZP.component("Header", Q), i.ZP.component("Footer", j), i.ZP.component("BrowserMetrics", At), new i.ZP({ router: Ae, store: Ee, vuetify: xe, render: function (t) { return t(it) } }).$mount("#app") }, 8409: function (t) { t.exports = { publicPath: { NODE_ENV: "production", BASE_URL: "" }.CI_PROJECT_NAME ? `/${{ NODE_ENV: "production", BASE_URL: "" }.CI_PROJECT_NAME}` : "", transpileDependencies: ["vuetify"], pages: { index: { entry: "src/main.js", title: "Metrics" } } } }, 646: function (t, e, s) { "use strict"; t.exports = s.p + "img/accionlabs-logo.bae04343.png" } }, e = {}; function s(i) { var a = e[i]; if (void 0 !== a) return a.exports; var o = e[i] = { exports: {} }; return t[i](o, o.exports, s), o.exports } s.m = t, function () { var t = []; s.O = function (e, i, a, o) { if (!i) { var r = 1 / 0; for (u = 0; u < t.length; u++) { i = t[u][0], a = t[u][1], o = t[u][2]; for (var n = !0, c = 0; c < i.length; c++)(!1 & o || r >= o) && Object.keys(s.O).every((function (t) { return s.O[t](i[c]) })) ? i.splice(c--, 1) : (n = !1, o < r && (r = o)); if (n) { t.splice(u--, 1); var l = a(); void 0 !== l && (e = l) } } return e } o = o || 0; for (var u = t.length; u > 0 && t[u - 1][2] > o; u--)t[u] = t[u - 1]; t[u] = [i, a, o] } }(), function () { s.d = function (t, e) { for (var i in e) s.o(e, i) && !s.o(t, i) && Object.defineProperty(t, i, { enumerable: !0, get: e[i] }) } }(), function () { s.g = function () { if ("object" === typeof globalThis) return globalThis; try { return this || new Function("return this")() } catch (t) { if ("object" === typeof window) return window } }() }(), function () { s.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) } }(), function () { s.r = function (t) { "undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) } }(), function () { s.p = "" }(), function () { var t = { 826: 0 }; s.O.j = function (e) { return 0 === t[e] }; var e = function (e, i) { var a, o, r = i[0], n = i[1], c = i[2], l = 0; if (r.some((function (e) { return 0 !== t[e] }))) { for (a in n) s.o(n, a) && (s.m[a] = n[a]); if (c) var u = c(s) } for (e && e(i); l < r.length; l++)o = r[l], s.o(t, o) && t[o] && t[o][0](), t[o] = 0; return s.O(u) }, i = self["webpackChunkdemo_app"] = self["webpackChunkdemo_app"] || []; i.forEach(e.bind(null, 0)), i.push = e.bind(null, i.push.bind(i)) }(); var i = s.O(void 0, [998], (function () { return s(4302) })); i = s.O(i) })();
//# sourceMappingURL=index.21574ca4.js.map